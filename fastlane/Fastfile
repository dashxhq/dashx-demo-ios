# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

WORKSPACE = "DashX Demo.xcworkspace"
XCODEPROJ = "DashX Demo.xcodeproj"
STAGING_SCHEME = "DashX Demo Staging"
PRODUCTION_SCHEME = "DashX Demo Production"
INTERNAL_TESTERS_GROUP = "Internal Testers"
DEMO_TESTERS_GROUP = "Demo Testers"

platform :ios do
  desc "Upload Release build to TestFlight for staging"
  lane :staging_release do
    release(scheme: STAGING_SCHEME)
  end

  desc "Upload Release build to TestFlight for production"
  lane :production_release do
    release(scheme: PRODUCTION_SCHEME)
  end

  private_lane :release do |options|
    setup_ci if ENV['CI']
    app_store_connect_api_key(
      key_id: ENV['APP_STORE_CONNECT_KEY_ID'],
      issuer_id: ENV['APP_STORE_CONNECT_ISSUER_ID'],
      key_content: ENV['APP_STORE_CONNECT_KEY_CONTENT']
    )
    match(type: 'appstore', git_private_key: ENV['GIT_PRIVATE_KEY'])
    build_app(workspace: WORKSPACE, scheme: options[:scheme])
    upload_to_testflight(
      skip_waiting_for_build_processing: ENV['CI'], # Saves CI minutes
      groups: options[:scheme] === PRODUCTION_SCHEME ? [
        INTERNAL_TESTERS_GROUP,
        DEMO_TESTERS_GROUP
      ] : [
        INTERNAL_TESTERS_GROUP
      ],
      distribute_external: options[:scheme] === PRODUCTION_SCHEME,
      notify_external_testers: false,
      submit_beta_review: options[:scheme] === PRODUCTION_SCHEME
    )
  end

  desc "Increase version number & build number."
  lane :bump do
    input_version_number = prompt(text: 'Enter new version_number / major / minor / patch: ')
    increment_version_number_options = if ['major', 'minor', 'patch'].include?(input_version_number)
        { bump_type: input_version_number }
    else
        { version_number: input_version_number }
    end

    new_version_number = nil

    [STAGING_SCHEME, PRODUCTION_SCHEME].each do |scheme|
      new_version_number = increment_version_number_in_xcodeproj(increment_version_number_options.merge(
        xcodeproj: XCODEPROJ,
        scheme: scheme
      ))
      increment_build_number_in_xcodeproj(
          build_number: ENV["BUILD_NUMBER"],
          xcodeproj: XCODEPROJ,
          scheme: scheme
      )
    end

    git_add
    git_commit(path: "*", message: "Bump version to v#{new_version_number}")
    push_to_git_remote
  end

  desc "Add new devices to provisioning profile"
  lane :provision_devices do
    register_devices(devices_file: "./fastlane/devices.txt")
    match(type: "development", force_for_new_devices: true)
  end
end
